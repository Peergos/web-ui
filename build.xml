<project name="Peergos web UI" default="update_and_run" basedir=".">
  <description>
    Building Peergos and the web UI
  </description>

  <property name="peergos_project_root" location="../peergos"/>
  <property name="server" location="server"/>
  <property name="ui_src" location="src"/>
  <property name="ui" location="${server}/webroot"/>
  <property name="assets" location="assets"/>
  <property name="vendor" location="vendor"/>
  <property name="timestamp.millis" value="1489731900000"/>

  <available file="peergos/README.md" type="file" property="submodule.present"/>

  <target name="peergos_submodule_sync" description="sync. peergos dependency" unless="submodule.present">
          <echo>Initialising peergos submodule...</echo>
          <exec executable="git" dir="." failonerror="true">
                  <arg value="submodule"/>
                  <arg value="init"/>
          </exec>
          <exec executable="git" dir="." failonerror="true">
                  <arg value="submodule"/>
                  <arg value="update"/>
          </exec>
  </target>
  <target name="peergos_submodule_update" description="sync. peergos dependency">
          <exec executable="git" dir="." failonerror="true">
                  <arg value="submodule"/>
                  <arg value="update"/>
		          <arg value="--remote"/>
		          <arg value="--merge"/>
          </exec>
  </target>

  <target name="init">
    <mkdir dir="${ui}/css/"/>
  </target>

  <!-- web ui building vendor and assets -->

  <target name="assets" description="copy static unminified assets">
    <mkdir dir="${ui}"/>
    <copy todir="${ui}">
      <fileset dir="${assets}"/>
    </copy>
  </target>

  <target name="js_vendor_dev" description="concat (don't minify) the vendor JS for development">
    <concat destfile="${ui}/js/vendor.js">
      <fileset dir="${vendor}/priors" includes="*.js"/>
      <fileset dir="${vendor}/dev" includes="*.js"/>
      <fileset dir="${vendor}/common" includes="*.js"/>
    </concat>
  </target>

  <target name="js_vendor_prod" description="concat and minify the vendor JS for production">
    <concat destfile="tmp.js">
      <fileset dir="${vendor}/priors" includes="*.js"/>
      <fileset dir="${vendor}/min" includes="*.js"/>
      <fileset dir="${vendor}/common" includes="*.js"/>
    </concat>
    <exec executable="java" dir="." failonerror="true">
      <arg value="-jar"/>
      <arg value="yuicompressor-2.4.8.jar"/>
      <arg value="-o"/>
      <arg value="${ui}/js/vendor.js"/>
      <arg value="tmp.js"/>
    </exec>
    <delete file="tmp.js"/>
  </target>

  <target name="css_vendor" description="concat the vendor CSS">
    <concat destfile="${ui}/css/vendor.css">
      <fileset dir="${vendor}/priors" includes="*.css"/>
      <fileset dir="${vendor}/min" includes="*.css"/>
      <fileset dir="${vendor}/common" includes="*.css"/>
    </concat>
  </target>

  <target name="css" description="concat and minify the CSS">
    <concat destfile="tmp.css">
      <fileset dir="${ui_src}/" includes="*.css"/>
    </concat>
    <exec executable="java" dir="." failonerror="true">
      <arg value="-jar"/>
      <arg value="yuicompressor-2.4.8.jar"/>
      <arg value="-o"/>
      <arg value="${ui}/css/peergos.css"/>
      <arg value="tmp.css"/>
    </exec>
    <delete file="tmp.css"/>
  </target>

  <target name="ui_dev_vendor" depends="assets,js_vendor_dev,css_vendor" description="build the ui vendor dependencies in development mode">
  </target>

  <target name="ui_prod_vendor" depends="assets,js_vendor_prod,css_vendor" description="build the ui vendor dependencies in production mode">
  </target>

  <!-- web ui building our stuff -->
  <target name="js" description="bundle all our vuejs components into js">
    <exec executable="java" dir="." failonerror="true" >
      <arg value="-jar"/>
      <arg value="JPack.jar"/>
      <arg value="-root"/>
      <arg value="${ui_src}/peergos.js"/>
      <arg value="-out"/>
      <arg value="${ui}/js/peergos.js"/>
      <arg value="-css-out"/>
      <arg value="tmp.css"/>
    </exec>
    <concat destfile="peergos.css">
      <fileset dir="${ui}/css/" includes="peergos.css"/>
      <fileset dir="." includes="tmp.css"/>
    </concat>
    <copy todir="${ui}/css/" overwrite="true">
      <fileset dir="." includes="peergos.css"/>
    </copy>
    <delete file="tmp.css"/>
    <delete file="peergos.css"/>
  </target>

  <target name="js_dev" description="bundle all our vuejs components into js without precompiling vue templates">
    <exec executable="java" dir="." failonerror="true" >
      <arg value="-jar"/>
      <arg value="JPack.jar"/>
      <arg value="-root"/>
      <arg value="${ui_src}/peergos.js"/>
      <arg value="-out"/>
      <arg value="${ui}/js/peergos.js"/>
      <arg value="-compile-templates"/>
      <arg value="false"/>
      <arg value="-css-out"/>
      <arg value="tmp.css"/>
    </exec>
    <concat destfile="peergos.css">
      <fileset dir="${ui}/css/" includes="peergos.css"/>
      <fileset dir="." includes="tmp.css"/>
    </concat>
    <copy todir="${ui}/css/" overwrite="true">
      <fileset dir="." includes="peergos.css"/>
    </copy>
    <delete file="tmp.css"/>
    <delete file="peergos.css"/>
  </target>

  <target name="ui" depends="init,ui_dev_vendor,assets,css,js" description="build our part of the ui">
  </target>

  <target name="ui_dev" depends="init,ui_dev_vendor,assets,css,js_dev" description="build our part of the ui in dev mode">
  </target>

  <taskdef name="watch"
           classname="org.apache.tools.ant.taskdefs.optional.watch.WatchTask"
           classpath="lib/watch-task-1.0.jar" />

  <target name="watch_ui" depends="ui_dev_vendor,ui_dev">
    <watch>
      <when>
        <target name="ui_dev"/>
        <fileset dir="${ui_src}" includes="**/*"/>
	<fileset dir="${assets}" includes="**/*"/>
        <fileset dir="${vendor}" includes="**/*"/>
      </when>
    </watch>
  </target>

  <!-- server building and running -->

  <target name="compile_server" depends="init" description="compile and build the server">
    <exec executable="ant" dir="${peergos_project_root}" failonerror="true">
      <arg value="dist"/>
    </exec>
    <exec executable="ant" dir="${peergos_project_root}" failonerror="true">
      <arg value="gwtc"/>
    </exec>
  </target>

  <available file=".git" type="dir" property="git.present"/>

  <target name="git.revision" description="Store git revision in ${repository.version}" if="git.present">
    <exec executable="git" outputproperty="git.revision" failifexecutionfails="false" errorproperty="">
      <arg value="log"/>
      <arg value="-1"/>
      <arg value="--pretty=format:%H"/>
    </exec>
    <condition property="repository.version" value="${git.revision}" else="unknown">
      <and>
        <isset property="git.revision"/>
        <length string="${git.revision}" trim="yes" length="0" when="greater"/>
      </and>
    </condition>
  </target>

  <target name="javac_version" description="Store javac version in ${javac.version}">
    <exec executable="javac" outputproperty="javac.version" failifexecutionfails="false" errorproperty="">
      <arg value="-version"/>
    </exec>
  </target>

  <target name="dist" depends="peergos_submodule_sync, clean, clean_server, compile_server, ui, git.revision, javac_version" description="regenerate the server">
    <mkdir dir="${server}"/>
    <mkdir dir="${server}/webroot"/>

    <copy todir="${server}" overwrite="true">
        <fileset file="${peergos_project_root}/Peergos.jar"/>
    </copy>
    <copy todir="${ui}/js">
      <fileset file="${peergos_project_root}/war/peergoslib/*cache.js"/>
    </copy>

    <!--flatten Peergos dependencies into a  fat-jar -->
    <zip destfile="${server}/Peergos.jar" update="true">
        <zipgroupfileset dir="${peergos_project_root}/lib" includes="*.jar"/>
    </zip>
    <!-- add web resouces to fat-jar under webroot -->
    <zip destfile="${server}/Peergos.jar" update="true">
      <fileset dir="${server}">
        <include name="**/webroot/**"/>
      </fileset>
    </zip>
    <!-- Add a manifest -->
    <mkdir dir="META-INF"/>
    <echo file="META-INF/MANIFEST.MF">Main-Class: peergos.server.Main
Class-Path: .
Version: web-ui/${repository.version}
Javac-Version: ${javac.version}</echo>
    <zip destfile="${server}/Peergos.jar" basedir="." includes="META-INF/MANIFEST.MF" update="true"></zip>
    <!-- Canonicalise jar -->
    <exec executable="java">
      <arg value="${peergos_project_root}/ReproducibleJar.java"/>
      <arg value="${server}/Peergos.jar"/>
      <arg value="${timestamp.millis}"/>
    </exec>
    <delete dir="META-INF"/>
  </target>

  <target name="run" depends="">
    <echo>
***********************************
***********************************
***********************************
      Starting Peergos Server
           Please wait...
***********************************
***********************************
***********************************
    </echo>
    <exec executable="java" dir="${server}">
      <arg value="-jar"/>
      <arg value="Peergos.jar"/>
      <arg value="pki-init"/>
      <arg value="-log-to-console"/>
      <arg value="true"/>
      <arg value="-useIPFS"/>
      <arg value="false"/>
      <arg value="-webroot"/>
      <arg value="webroot"/>
      <arg value="-webcache"/>
      <arg value="false"/>
      <arg value="-max-users"/>
      <arg value="5"/>
      <arg value="peergos.password"/>
      <arg value="testpassword"/>
      <arg value="pki.keygen.password"/>
      <arg value="testpkipassword"/>
      <arg value="pki.keyfile.password"/>
      <arg value="testpkifilepassword"/>
      <arg value="default-quota"/>
      <arg value="157286400"/>
      <arg value="PEERGOS_PATH"/>
      <arg value="${server}/.peergos"/>
      <arg value="-admin-usernames"/>
      <arg value="peergos"/>
      <arg value="-collect-metrics"/>
      <arg value="true"/>
      <arg value="-enable-wait-list"/>
      <arg value="true"/>
      <arg value="-max-daily-signups"/>
      <arg value="1000"/>
      <arg value="-generate-token"/>
      <arg value="true"/>
      <!-- uncomment these to test payments!!!
      <arg value="quota-admin-address"/>
      <arg value="/ip4/127.0.0.1/tcp/6000"/>
      <arg value="-payment-domain"/>
      <arg value="localhost:7000"/>
      <!--!-->
    </exec>
  </target>

  <target name="run_dev" depends="">
    <echo>
***********************************
***********************************
***********************************
      Starting Peergos Server
           Please wait...
***********************************
***********************************
***********************************
    </echo>
    <exec executable="java" dir="${server}">
      <arg value="-jar"/>
      <arg value="Peergos.jar"/>
      <arg value="pki-init"/>
      <arg value="-log-to-console"/>
      <arg value="true"/>
      <arg value="-useIPFS"/>
      <arg value="false"/>
      <arg value="-webroot"/>
      <arg value="webroot"/>
      <arg value="-webcache"/>
      <arg value="false"/>
      <arg value="-max-users"/>
      <arg value="5"/>
      <arg value="peergos.password"/>
      <arg value="testpassword"/>
      <arg value="pki.keygen.password"/>
      <arg value="testpkipassword"/>
      <arg value="pki.keyfile.password"/>
      <arg value="testpkifilepassword"/>
      <arg value="default-quota"/>
      <arg value="357286400"/>
      <arg value="PEERGOS_PATH"/>
      <arg value="${server}/.peergos"/>
      <arg value="-admin-usernames"/>
      <arg value="peergos"/>
      <arg value="-collect-metrics"/>
      <arg value="true"/>
      <arg value="-enable-wait-list"/>
      <arg value="true"/>
      <arg value="-max-daily-signups"/>
      <arg value="1000"/>
      <arg value="-generate-token"/>
      <arg value="true"/>
      <arg value="-include-csp"/>
      <arg value="false"/>
      <!-- uncomment these to test payments!!!
      <arg value="quota-admin-address"/>
      <arg value="/ip4/127.0.0.1/tcp/6000"/>
      <arg value="-payment-domain"/>
      <arg value="localhost:7000"/>
      <!--!-->
    </exec>
  </target>

  <target name="message" depends="">
    <exec executable="java" dir="${server}">
      <arg value="-jar"/>
      <arg value="Peergos.jar"/>
      <arg value="server-msg"/>
      <arg value="send"/>
      <arg value="-username"/>
      <arg value="peergos"/>
      <arg value="-msg-file"/>
      <arg value="msg.txt"/>
      <arg value="PEERGOS_PATH"/>
      <arg value="${server}/.peergos"/>
    </exec>
  </target>

  <target name="update_and_run" depends="peergos_submodule_sync,dist,run">
  </target>

  <target name="update_and_run_dev" depends="peergos_submodule_sync,dist,run_dev">
  </target>

  <target name="test" depends="">
  </target>

  <target name="clean" description="clean up">
    <delete dir="${ui}"/>
  </target>

  <target name="clean_server" description="clean up">
    <delete dir="${server}"/>
  </target>
</project>
